<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
    <name>gem_rydberg1d</name>
    <author>WW</author>
    <description>
        eit 2 fotony
    </description>
    <features>
        <benchmark/>
        <error_check/>
        <bing/>
        <fftw plan="patient"/>
        <globals>
        <![CDATA[
           void load_from_binary_file(char const*const fname, std::string Atimestamp, void * dst, size_t size) {{
                FILE* fpBinary;
                std::string pathname = "../init_data/" + Atimestamp + "/" + fname;
                if ((fpBinary = fopen(pathname.c_str(), "rb")) == NULL)
                _LOG(_ERROR_LOG_LEVEL, "Unable to open input  file %s\n", pathname.c_str());
               auto rsize=fread(dst, 1, size, fpBinary);
               if (rsize!=size)
                _LOG(_ERROR_LOG_LEVEL, "problem reading %s: rsize=%d != requested %d\n", pathname.c_str(), (int) rsize, (int) size);
               fclose(fpBinary);
            }}
            complex *boundary = NULL; // warunki brzegowe dla propagacji z prawej
            complex *Cpl_t = NULL; // coupling
            complex *g_at1_zt = NULL; // atomy 1
            complex *g_at2_zt = NULL; // atomy 2
            complex *Mod_zt = NULL; // modulacja
            complex GammaP, VR;
        ]]>
        </globals>
        <arguments append_args_to_output_filename="yes">
            <argument name="GammaP_re" type="real" default_value="0.0"/>
            <argument name="GammaP_im" type="real" default_value="0.0"/>
            <argument name="c0" type="real" default_value="1"/>
            <argument name="c6" type="real" default_value="1e-3"/>
            <argument name="Vmax" type="real" default_value="1e-3"/>
            <argument name="zsteps" type="int" default_value="100"/>
            <argument name="zradious" type="real" default_value="5"/>
            <argument name="tmax" type="real" default_value="5"/>
            <argument name="Atimestamp" type="string" default_value="''"/>
            <![CDATA[
                GammaP = complex(GammaP_re, GammaP_im);
            ]]>
        </arguments>
         <validation kind="run-time"/>
    </features>

    <geometry>
        <propagation_dimension>t</propagation_dimension>
        <transverse_dimensions>
            <dimension name="z1" lattice="zsteps" domain="(-zradious, zradious)" transform="dft" />
            <dimension name="z2" lattice="zsteps" domain="(-zradious, zradious)" transform="dft"/>
        </transverse_dimensions>
    </geometry>

    <vector name="main" dimensions="z1 z2" type="complex">
       <components>SS</components><!-- spin-wave -->
    </vector>
    <vector name="elpol" dimensions="z1 z2" type="complex">
       <components>EP</components><!-- atomic polarization -->
    </vector>
    <vector name="elsp" dimensions="z1 z2" type="complex">
       <components>ES</components><!-- atomic polarization -->
    </vector>
    <vector name="polsp" dimensions="z1 z2" type="complex">
       <components>PS</components><!-- atomic polarization -->
    </vector>
    <vector name="polpol" dimensions="z1 z2" type="complex">
       <components>PP</components><!-- atomic polarization -->
    </vector>
    <vector name="cross1" dimensions="z1 z2" type="complex">
        <components>EE</components><!-- slabe pole -->
    </vector>
    <vector name="boundary" dimensions="z1 z2" type="real">
        <components>bond</components><!-- blok periodycznych b.c. -->
    </vector>
    <computed_vector name="Atoms1" dimensions="z1" type="complex">
    <components> g_at1 </components>
    <evaluation><!-- laser zewnetrzny -->
      <dependencies basis="z1"></dependencies>
        <![CDATA[
        real nt=(t/tmax)*{tsteps};
        int it=int(nt);
        real c=nt-it;
        long zt_index =  _index_z1 * ({tsteps}+2) + it;
        g_at1 = (1-c) * g_at1_zt[zt_index] + c * g_at1_zt[zt_index + 1];
        ]]>
    </evaluation>
    </computed_vector>
    <computed_vector name="Atoms2" dimensions="z2" type="complex">
    <components> g_at2 </components>
    <evaluation><!-- laser zewnetrzny -->
      <dependencies basis="z2"></dependencies>
        <![CDATA[
        real nt=(t/tmax)*{tsteps};
        int it=int(nt);
        real c=nt-it;
        long zt_index =  _index_z2 * ({tsteps}+2) + it;
        g_at2 = (1-c) * g_at2_zt[zt_index] + c * g_at2_zt[zt_index + 1];
        ]]>
    </evaluation>
    </computed_vector>
    <computed_vector name="Coupling" dimensions="" type="complex">
    <components> Cpl </components>
    <evaluation><!-- laser zewnetrzny -->
      <dependencies basis=""></dependencies>
      <![CDATA[
        real nt=(t/tmax)*{tsteps};
        int it=int(nt);
        real c=nt-it;
        Cpl = (1-c)*Cpl_t[it] + c*Cpl_t[it+1];
      ]]>
    </evaluation>
    </computed_vector>
    <computed_vector name="Modulation" dimensions="z1" type="complex">
        <components> Mod </components>
        <evaluation><!-- laser zewnetrzny -->
          <dependencies basis="z1"></dependencies>
          <![CDATA[
            real nt=(t/tmax)*{tsteps};
            int it=int(nt);
            real c=nt-it;
            long zt_index =  _index_z1 * ({tsteps}+2) + it;
            Mod = (1-c) * Mod_zt[zt_index] + c * Mod_zt[zt_index + 1];
          ]]>
        </evaluation>
    </computed_vector>

    <computed_vector name="Interaction" dimensions="z1 z2" type="complex">
        <components> VMod </components>
        <evaluation><!-- laser zewnetrzny -->
          <dependencies basis="z1"> Modulation </dependencies>
          <![CDATA[
          complex Mod2 = _active_z1_Modulation[(0+_index_z2*1) * _z1_Modulation_ncomponents + 0];
          real r = abs(z1-z2);
          real r_3 = r*r*r;
          real r_6 = r_3*r_3;
          real V = c6 / r_6;
          if(V > Vmax) V = Vmax;
          VMod = Mod + Mod2 + i * V;
          ]]>
        </evaluation>
    </computed_vector>

   <computed_vector name="tranposes" dimensions="z1 z2" type="complex" >
    <components> PE SP SE </components>
    <evaluation>
      <dependencies basis="z1 z1"> elpol elsp polsp </dependencies>
      <![CDATA[
      long tr_index = _index_z1 + _index_z2*_lattice_z1;
        PE = _active_z1z2_elpol[tr_index];
        SE = _active_z1z2_elsp[tr_index];
        SP = _active_z1z2_polsp[tr_index];
      ]]>
    </evaluation>
  </computed_vector>

    <sequence>
        <filter name="load_initial_data">
           <dependencies></dependencies>
           <![CDATA[
             std::string fnameE = "../init_data/" + Atimestamp;
             Cpl_t = (complex*) xmds_malloc(sizeof(complex) * ({tsteps}+2)); // coupling
             g_at1_zt = (complex*) xmds_malloc(sizeof(complex) * ({tsteps}+2) * zsteps); // atomy 1
             g_at2_zt = (complex*) xmds_malloc(sizeof(complex) * ({tsteps}+2) * zsteps); // atomy 2
             Mod_zt = (complex*) xmds_malloc(sizeof(complex) * ({tsteps}+2) * zsteps); // modulacja
             load_from_binary_file("EE_init.bin",Atimestamp,_active_z1z2_cross1,_z1z2_cross1_alloc_size*sizeof(complex));
             load_from_binary_file("Cpl_t_init.bin",Atimestamp,Cpl_t,({tsteps}+2)*sizeof(complex));
             load_from_binary_file("g_at_zt_init.bin",Atimestamp,g_at1_zt,zsteps*({tsteps}+2)*sizeof(complex));
             load_from_binary_file("g_at_zt_init.bin",Atimestamp,g_at2_zt,zsteps*({tsteps}+2)*sizeof(complex));
             load_from_binary_file("bond.bin",Atimestamp,_active_z1z2_boundary,_z1z2_boundary_alloc_size*sizeof(real));
             load_from_binary_file("Mod_zt.bin",Atimestamp,Mod_zt,zsteps*({tsteps}+2)*sizeof(complex));
             load_from_binary_file("SS_init.bin",Atimestamp,_active_z1z2_main,_z1z2_main_alloc_size*sizeof(complex));
             load_from_binary_file("EP_init.bin",Atimestamp,_active_z1z2_elpol,_z1z2_elpol_alloc_size*sizeof(complex));
             load_from_binary_file("ES_init.bin",Atimestamp,_active_z1z2_elsp,_z1z2_elsp_alloc_size*sizeof(complex));
             load_from_binary_file("PS_init.bin",Atimestamp,_active_z1z2_polsp,_z1z2_polsp_alloc_size*sizeof(complex));
             load_from_binary_file("PP_init.bin",Atimestamp,_active_z1z2_polpol,_z1z2_polpol_alloc_size*sizeof(complex));
           ]]>
        </filter>
        <integrate algorithm="ARK89" interval="tmax" steps="{tsteps}" tolerance="1.0e0">
            <operators>
                <operator kind="ip" constant="yes">
                    <operator_names>Lz12</operator_names>
                    <![CDATA[
                        Lz12 = i * c0 * (kz1+kz2);
                    ]]>
                </operator>
                <operator kind="ip" constant="yes">
                    <operator_names>Lz1</operator_names>
                    <![CDATA[
                        Lz1 = i * c0 * kz1;
                    ]]>
                </operator>
                <dependencies>Coupling Atoms1 Atoms2 Modulation Interaction tranposes boundary</dependencies>
                <integration_vectors>main elpol elsp polsp polpol cross1</integration_vectors>
                <![CDATA[;
                    complex Mod2 = _active_z1_Modulation[(0+_index_z2*1) * _z1_Modulation_ncomponents + 0];
                    dEE_dt = Lz12[EE] + i*(g_at1*EP + g_at2*PE) - bond*EE;
                    dEP_dt = Lz1[EP] - GammaP*EP + i*g_at1*EE + i*g_at1*PP + i*Cpl*ES - bond*EP;
                    dES_dt = Lz1[ES] + Mod2*ES + i*g_at1*PS + i*conj(Cpl)*EP - bond*ES;
                    dPS_dt = - GammaP*PS + Mod2*PS + i*g_at1*ES + i*Cpl*SS + i*conj(Cpl)*PP;
                    dPP_dt = - 2*GammaP*PP + i*(g_at1*EP + g_at2*PE) + i*Cpl*(PS+SP);
                    dSS_dt = i*conj(Cpl)*(PS+SP) - VMod*SS;

                    // dE_dt = Lz[E] + i * n_at * P ;
                    // dP_dt = - GammaP * P + i * E + i * Cpl * S;
                    // dS_dt = Mod * S + i * conj(Cpl) * P;
                ]]>
            </operators>
            <samples>{tsteps}</samples>
        </integrate>
    </sequence>
    <output format="binary">
        <group>
            <sampling basis="z1 z2" initial_sample="no">
            <moments> SSR SSI EER EEI PPR PPI ESR ESI PSR PSI EPR EPI</moments>
            <dependencies> main cross1 polpol elpol elsp polsp</dependencies>
                <![CDATA[
                    _SAMPLE_COMPLEX(SS);
                    _SAMPLE_COMPLEX(EE);
                    _SAMPLE_COMPLEX(PP);
                    _SAMPLE_COMPLEX(ES);
                    _SAMPLE_COMPLEX(PS);
                    _SAMPLE_COMPLEX(EP);
                ]]>
            </sampling>
        </group>
    </output>
</simulation>
